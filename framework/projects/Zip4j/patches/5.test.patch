diff --git a/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java b/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java
index 4e59970..3956505 100644
--- a/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java
+++ b/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java
@@ -12,7 +12,6 @@ import net.lingala.zip4j.model.enums.AesVersion;
 import net.lingala.zip4j.model.enums.CompressionMethod;
 import net.lingala.zip4j.model.enums.EncryptionMethod;
 import net.lingala.zip4j.progress.ProgressMonitor;
-import net.lingala.zip4j.testutils.HeaderVerifier;
 import net.lingala.zip4j.testutils.TestUtils;
 import net.lingala.zip4j.testutils.ZipFileVerifier;
 import net.lingala.zip4j.util.BitUtils;
@@ -39,8 +38,6 @@ public class AddFilesToZipIT extends AbstractIT {
   @Rule
   public ExpectedException expectedException = ExpectedException.none();
 
-  private HeaderVerifier headerVerifier = new HeaderVerifier();
-
   @Test
   public void testAddFileAsStringParameterThrowsExceptionWhenFileDoesNotExist() throws ZipException {
     expectedException.expectMessage("File does not exist: somefile.txt");
@@ -723,7 +720,6 @@ public class AddFilesToZipIT extends AbstractIT {
     ZipFileVerifier.verifyZipFileByExtractingAllFiles(generatedZipFile, PASSWORD, outputFolder, 1);
     verifyZipFileContainsFiles(generatedZipFile, singletonList("бореиская.txt"), CompressionMethod.DEFLATE,
         EncryptionMethod.AES, AesKeyStrength.KEY_STRENGTH_256);
-    headerVerifier.verifyLocalFileHeaderUncompressedSize(generatedZipFile, "бореиская.txt", 0);
   }
 
   @Test
diff --git a/src/test/java/net/lingala/zip4j/testutils/HeaderVerifier.java b/src/test/java/net/lingala/zip4j/testutils/HeaderVerifier.java
deleted file mode 100644
index cb182c0..0000000
--- a/src/test/java/net/lingala/zip4j/testutils/HeaderVerifier.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package net.lingala.zip4j.testutils;
-
-import net.lingala.zip4j.ZipFile;
-import net.lingala.zip4j.headers.HeaderReader;
-import net.lingala.zip4j.model.FileHeader;
-import net.lingala.zip4j.model.LocalFileHeader;
-import net.lingala.zip4j.util.InternalZipConstants;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class HeaderVerifier {
-
-  HeaderReader headerReader = new HeaderReader();
-
-  public void verifyLocalFileHeaderUncompressedSize(File generatedZipFile, String fileNameInZipToVerify,
-                                                    long expectedUncompressedSize) throws IOException {
-
-    LocalFileHeader localFileHeader = getLocalFileHeaderForEntry(generatedZipFile, fileNameInZipToVerify);
-    assertThat(localFileHeader.getUncompressedSize()).isEqualTo(expectedUncompressedSize);
-  }
-
-  private LocalFileHeader getLocalFileHeaderForEntry(File generatedZipFile, String fileNameInZipToVerify)
-      throws IOException {
-
-    InputStream inputStream = positionRandomAccessFileToLocalFileHeaderStart(generatedZipFile,
-        fileNameInZipToVerify);
-    return headerReader.readLocalFileHeader(inputStream, InternalZipConstants.CHARSET_UTF_8);
-  }
-
-  private InputStream positionRandomAccessFileToLocalFileHeaderStart(File generatedZipFile, String fileNameInZip)
-      throws IOException{
-
-    ZipFile zipFile = new ZipFile(generatedZipFile);
-    FileHeader fileHeader = zipFile.getFileHeader(fileNameInZip);
-
-    if (fileHeader == null) {
-      throw new RuntimeException("Cannot find an entry with name: " + fileNameInZip + " in zip file: "
-          + generatedZipFile);
-    }
-
-    InputStream inputStream = new FileInputStream(generatedZipFile);
-    if (inputStream.skip(fileHeader.getOffsetLocalHeader()) != fileHeader.getOffsetLocalHeader()) {
-      throw new IOException("Cannot skip " + fileHeader.getOffsetLocalHeader() + " bytes for entry "
-          + fileHeader.getFileName());
-    }
-    return inputStream;
-  }
-}
