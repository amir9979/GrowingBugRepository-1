diff --git a/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java b/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java
index 28547f9..353762a 100644
--- a/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java
+++ b/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java
@@ -17,8 +17,6 @@ import net.lingala.zip4j.util.Zip4jUtil;
 import java.io.IOException;
 import java.io.InputStream;
 
-import static net.lingala.zip4j.util.Zip4jUtil.getCompressionMethod;
-
 public class AddStreamToZipTask extends AbstractAddFileToZipTask<AddStreamToZipTaskParameters> {
 
   public AddStreamToZipTask(ZipModel zipModel, char[] password, HeaderWriter headerWriter, AsyncTaskParameters asyncTaskParameters) {
@@ -38,16 +36,15 @@ public class AddStreamToZipTask extends AbstractAddFileToZipTask<AddStreamToZipT
     removeFileIfExists(getZipModel(), taskParameters.zip4jConfig, taskParameters.zipParameters.getFileNameInZip(),
         progressMonitor);
 
+    // For streams, it is necessary to write extended local file header because of Zip standard encryption.
+    // If we do not write extended local file header, zip standard encryption needs a crc upfront for key,
+    // which cannot be calculated until we read the complete stream. If we use extended local file header,
+    // last modified file time is used, or current system time if not available.
+    taskParameters.zipParameters.setWriteExtendedLocalFileHeader(true);
+
     if (taskParameters.zipParameters.getCompressionMethod().equals(CompressionMethod.STORE)) {
       // Set some random value here. This will be updated again when closing entry
       taskParameters.zipParameters.setEntrySize(0);
-      taskParameters.zipParameters.setWriteExtendedLocalFileHeader(false);
-    } else {
-      // For streams, it is necessary to write extended local file header because of Zip standard encryption.
-      // If we do not write extended local file header, zip standard encryption needs a crc upfront for key,
-      // which cannot be calculated until we read the complete stream. If we use extended local file header,
-      // last modified file time is used, or current system time if not available.
-      taskParameters.zipParameters.setWriteExtendedLocalFileHeader(true);
     }
 
     try(SplitOutputStream splitOutputStream = new SplitOutputStream(getZipModel().getZipFile(), getZipModel().getSplitLength());
@@ -68,7 +65,7 @@ public class AddStreamToZipTask extends AbstractAddFileToZipTask<AddStreamToZipT
 
       FileHeader fileHeader = zipOutputStream.closeEntry();
 
-      if (CompressionMethod.STORE.equals(getCompressionMethod(fileHeader))) {
+      if (fileHeader.getCompressionMethod().equals(CompressionMethod.STORE)) {
         updateLocalFileHeader(fileHeader, splitOutputStream);
       }
     }
diff --git a/src/main/java/net/lingala/zip4j/util/Zip4jUtil.java b/src/main/java/net/lingala/zip4j/util/Zip4jUtil.java
index 39a8f56..4925bb7 100755
--- a/src/main/java/net/lingala/zip4j/util/Zip4jUtil.java
+++ b/src/main/java/net/lingala/zip4j/util/Zip4jUtil.java
@@ -17,7 +17,7 @@
 package net.lingala.zip4j.util;
 
 import net.lingala.zip4j.exception.ZipException;
-import net.lingala.zip4j.model.AbstractFileHeader;
+import net.lingala.zip4j.model.LocalFileHeader;
 import net.lingala.zip4j.model.enums.CompressionMethod;
 
 import java.io.File;
@@ -112,7 +112,7 @@ public class Zip4jUtil {
     }
   }
 
-  public static CompressionMethod getCompressionMethod(AbstractFileHeader localFileHeader) {
+  public static CompressionMethod getCompressionMethod(LocalFileHeader localFileHeader) {
     if (localFileHeader.getCompressionMethod() != CompressionMethod.AES_INTERNAL_ONLY) {
       return localFileHeader.getCompressionMethod();
     }
