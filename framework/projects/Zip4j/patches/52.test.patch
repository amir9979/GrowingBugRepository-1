diff --git a/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java b/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java
index 89943ab..df18d5f 100644
--- a/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java
+++ b/src/test/java/net/lingala/zip4j/AddFilesToZipIT.java
@@ -872,6 +872,23 @@ public class AddFilesToZipIT extends AbstractIT {
     ZipFileVerifier.verifyZipFileByExtractingAllFiles(generatedZipFile, outputFolder, 1);
   }
 
+  @Test
+  public void testAddStreamWithStoreCompressionAndAesEncryptionWorksFine() throws IOException {
+    ZipFile zipFile = new ZipFile(generatedZipFile, PASSWORD);
+    File fileToAdd = TestUtils.getTestFileFromResources("sample.pdf");
+
+    try(InputStream inputStream = new FileInputStream(fileToAdd)) {
+      ZipParameters zipParameters = new ZipParameters();
+      zipParameters.setCompressionMethod(CompressionMethod.STORE);
+      zipParameters.setEncryptionMethod(EncryptionMethod.AES);
+      zipParameters.setEncryptFiles(true);
+      zipParameters.setFileNameInZip(fileToAdd.getName());
+      zipFile.addStream(inputStream, zipParameters);
+    }
+
+    extractZipFileWithStream(generatedZipFile, PASSWORD);
+  }
+
   @Test
   public void testAddFolderWithCustomBufferSize() throws IOException {
     ZipFile zipFile = new ZipFile(generatedZipFile);
@@ -1041,4 +1058,15 @@ public class AddFilesToZipIT extends AbstractIT {
     assertThat(fileHeader.getVersionMadeBy()).isEqualTo(versionMadeBy);
     assertThat(fileHeader.getVersionNeededToExtract()).isEqualTo(versionNeededToExtract);
   }
+
+  @SuppressWarnings("StatementWithEmptyBody")
+  private void extractZipFileWithStream(File zipFileToExtract, char[] password) throws IOException {
+    byte[] readBuff = new byte[InternalZipConstants.BUFF_SIZE];
+    try (ZipInputStream inputStream = new ZipInputStream(new FileInputStream(zipFileToExtract), password)) {
+      while ((inputStream.getNextEntry()) != null) {
+        while (inputStream.read(readBuff) != -1) {
+        }
+      }
+    }
+  }
 }
