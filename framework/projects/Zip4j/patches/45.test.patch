diff --git a/src/test/java/net/lingala/zip4j/io/inputstream/ZipInputStreamIT.java b/src/test/java/net/lingala/zip4j/io/inputstream/ZipInputStreamIT.java
index 1d6a92e..96a1734 100644
--- a/src/test/java/net/lingala/zip4j/io/inputstream/ZipInputStreamIT.java
+++ b/src/test/java/net/lingala/zip4j/io/inputstream/ZipInputStreamIT.java
@@ -177,41 +177,39 @@ public class ZipInputStreamIT extends AbstractIT {
   @Test
   public void testExtractFilesForZipFileWithInvalidExtraDataRecordIgnoresIt() throws IOException {
     InputStream inputStream = new FileInputStream(getTestArchiveFromResources("invalid_extra_data_record.zip"));
-    try (ZipInputStream zipInputStream = new ZipInputStream(inputStream, "password".toCharArray())) {
-      byte[] b = new byte[4096];
-      while (zipInputStream.getNextEntry() != null) {
-        while (zipInputStream.read(b) != -1) {
+    ZipInputStream zipInputStream = new ZipInputStream(inputStream, "password".toCharArray());
+    byte[] b = new byte[4096];
+    while (zipInputStream.getNextEntry() != null) {
+      while (zipInputStream.read(b) != -1) {
 
-        }
       }
     }
+    zipInputStream.close();
   }
 
   @Test
   public void testGetNextEntryReturnsNextEntryEvenIfEntryNotCompletelyRead() throws IOException {
     File createZipFile = createZipFile(CompressionMethod.DEFLATE);
-    try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(createZipFile))) {
-      int numberOfEntries = 0;
-      while (zipInputStream.getNextEntry() != null) {
-        numberOfEntries++;
-      }
-      assertThat(numberOfEntries).isEqualTo(FILES_TO_ADD.size());
+    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(createZipFile));
+    int numberOfEntries = 0;
+    while (zipInputStream.getNextEntry() != null) {
+      numberOfEntries++;
     }
+    assertThat(numberOfEntries).isEqualTo(FILES_TO_ADD.size());
   }
 
   @Test
   public void testGetFileNamesWithChineseCharset() throws IOException {
     InputStream inputStream = new FileInputStream(getTestArchiveFromResources("testfile_with_chinese_filename_by_7zip.zip"));
-    try (ZipInputStream zipInputStream = new ZipInputStream(inputStream, CHARSET_GBK)) {
-      LocalFileHeader localFileHeader;
-      String expactedFileName = "fff - 副本.txt";
-      Set<String> filenameSet = new HashSet<>();
+    ZipInputStream zipInputStream = new ZipInputStream(inputStream, CHARSET_GBK);
+    LocalFileHeader localFileHeader;
+    String expactedFileName = "fff - 副本.txt";
+    Set<String> filenameSet = new HashSet<>();
 
-      while ((localFileHeader = zipInputStream.getNextEntry()) != null) {
-        filenameSet.add(localFileHeader.getFileName());
-      }
-      assertThat(filenameSet.contains(expactedFileName)).isTrue();
+    while ((localFileHeader = zipInputStream.getNextEntry()) != null) {
+      filenameSet.add(localFileHeader.getFileName());
     }
+    assertThat(filenameSet.contains(expactedFileName)).isTrue();
   }
 
   @Test
@@ -256,32 +254,6 @@ public class ZipInputStreamIT extends AbstractIT {
     assertThat(totalNumberOfEntriesRead).isEqualTo(6);
   }
 
-  @Test
-  public void testAvailableThrowsExceptionWhenStreamClosed() throws IOException {
-    expectedException.expect(IOException.class);
-    expectedException.expectMessage("Stream closed");
-
-    File createZipFile = createZipFile(CompressionMethod.DEFLATE);
-    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(createZipFile));
-    zipInputStream.close();
-
-    zipInputStream.available();
-  }
-
-  @Test
-  public void testAvailableReturns1WhenEntryEOFNotReachedAnd0AfterEOFReached() throws IOException {
-    byte[] b = new byte[InternalZipConstants.BUFF_SIZE];
-    File createZipFile = createZipFile(CompressionMethod.DEFLATE);
-    try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(createZipFile))) {
-      while (zipInputStream.getNextEntry() != null) {
-        while (zipInputStream.read(b) != -1) {
-          assertThat(zipInputStream.available()).isEqualTo(1);
-        }
-        assertThat(zipInputStream.available()).isEqualTo(0);
-      }
-    }
-  }
-
   private void extractZipFileWithInputStreams(File zipFile, char[] password) throws IOException {
     extractZipFileWithInputStreams(zipFile, password, 4096, AesVersion.TWO);
   }
@@ -382,4 +354,4 @@ public class ZipInputStreamIT extends AbstractIT {
     }
     return generatedZipFile;
   }
-}
+}
\ No newline at end of file
