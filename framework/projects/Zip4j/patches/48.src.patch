diff --git a/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java b/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java
index 90716df..28547f9 100644
--- a/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java
+++ b/src/main/java/net/lingala/zip4j/tasks/AddStreamToZipTask.java
@@ -38,16 +38,16 @@ public class AddStreamToZipTask extends AbstractAddFileToZipTask<AddStreamToZipT
     removeFileIfExists(getZipModel(), taskParameters.zip4jConfig, taskParameters.zipParameters.getFileNameInZip(),
         progressMonitor);
 
-
-    // For streams, it is necessary to write extended local file header because of Zip standard encryption.
-    // If we do not write extended local file header, zip standard encryption needs a crc upfront for key,
-    // which cannot be calculated until we read the complete stream. If we use extended local file header,
-    // last modified file time is used, or current system time if not available.
-    taskParameters.zipParameters.setWriteExtendedLocalFileHeader(true);
-
     if (taskParameters.zipParameters.getCompressionMethod().equals(CompressionMethod.STORE)) {
       // Set some random value here. This will be updated again when closing entry
       taskParameters.zipParameters.setEntrySize(0);
+      taskParameters.zipParameters.setWriteExtendedLocalFileHeader(false);
+    } else {
+      // For streams, it is necessary to write extended local file header because of Zip standard encryption.
+      // If we do not write extended local file header, zip standard encryption needs a crc upfront for key,
+      // which cannot be calculated until we read the complete stream. If we use extended local file header,
+      // last modified file time is used, or current system time if not available.
+      taskParameters.zipParameters.setWriteExtendedLocalFileHeader(true);
     }
 
     try(SplitOutputStream splitOutputStream = new SplitOutputStream(getZipModel().getZipFile(), getZipModel().getSplitLength());
