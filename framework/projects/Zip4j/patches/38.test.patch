diff --git a/src/test/java/net/lingala/zip4j/RemoveFilesFromZipIT.java b/src/test/java/net/lingala/zip4j/RemoveFilesFromZipIT.java
index b699cc5..28bfa46 100644
--- a/src/test/java/net/lingala/zip4j/RemoveFilesFromZipIT.java
+++ b/src/test/java/net/lingala/zip4j/RemoveFilesFromZipIT.java
@@ -201,31 +201,4 @@ public class RemoveFilesFromZipIT extends AbstractIT {
     ZipFileVerifier.verifyZipFileByExtractingAllFiles(generatedZipFile, outputFolder, 2);
     verifyFileHeadersDoesNotExist(zipFile, filesToRemove);
   }
-
-  @Test
-  public void testRemoveFirstEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries() throws IOException {
-    testRemoveEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries("test-files/zero_byte_file.txt");
-  }
-
-  @Test
-  public void testRemoveLastEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries() throws IOException {
-    testRemoveEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries("test-files/бореиская.txt");
-  }
-
-  @Test
-  public void testRemoveMiddleEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries() throws IOException {
-    testRemoveEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries("test-files/file_PDF_1MB.pdf");
-  }
-
-  private void testRemoveEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries(
-      String fileNameToRemove) throws IOException {
-    TestUtils.copyFile(TestUtils.getTestArchiveFromResources("cen_dir_entries_diff_order_as_local_entries.zip"),
-        generatedZipFile);
-    ZipFile zipFile = new ZipFile(generatedZipFile);
-    zipFile.removeFile(fileNameToRemove);
-
-    zipFile = new ZipFile(generatedZipFile);
-    ZipFileVerifier.verifyZipFileByExtractingAllFiles(generatedZipFile, outputFolder, 12);
-    verifyFileHeadersDoesNotExist(zipFile, Collections.singletonList(fileNameToRemove));
-  }
 }
diff --git a/src/test/java/net/lingala/zip4j/RenameFilesInZipIT.java b/src/test/java/net/lingala/zip4j/RenameFilesInZipIT.java
index 5e888f9..4b64865 100644
--- a/src/test/java/net/lingala/zip4j/RenameFilesInZipIT.java
+++ b/src/test/java/net/lingala/zip4j/RenameFilesInZipIT.java
@@ -260,33 +260,6 @@ public class RenameFilesInZipIT extends AbstractIT {
     verifyFileNamesChanged(zipFile, fileNamesMap, false);
   }
 
-  @Test
-  public void testRenameFirstEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries() throws IOException {
-    testRenameEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries("test-files/zero_byte_file.txt");
-  }
-
-  @Test
-  public void testRenameLastEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries() throws IOException {
-    testRenameEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries("test-files/бореиская.txt");
-  }
-
-  @Test
-  public void testRenameMiddleEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries() throws IOException {
-    testRenameEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries("test-files/file_PDF_1MB.pdf");
-  }
-
-  private void testRenameEntryFromZipWhichHasCentralDirEntriesInDifferentOrderThanLocalEntries(
-      String fileNameToRename) throws IOException {
-    TestUtils.copyFile(TestUtils.getTestArchiveFromResources("cen_dir_entries_diff_order_as_local_entries.zip"),
-        generatedZipFile);
-    ZipFile zipFile = new ZipFile(generatedZipFile);
-    zipFile.renameFile(fileNameToRename, "somename.txt");
-
-    zipFile = new ZipFile(generatedZipFile);
-    ZipFileVerifier.verifyZipFileByExtractingAllFiles(generatedZipFile, null, outputFolder, 13, false);
-    verifyFileNamesChanged(zipFile, Collections.singletonMap(fileNameToRename, "somename.txt"), false);
-  }
-
   private void verifyFileNamesChanged(ZipFile zipFile, Map<String, String> fileNamesMap) throws IOException {
     verifyFileNamesChanged(zipFile, fileNamesMap, true);
   }
diff --git a/src/test/java/net/lingala/zip4j/headers/HeaderUtilTest.java b/src/test/java/net/lingala/zip4j/headers/HeaderUtilTest.java
index 533c07a..999124b 100644
--- a/src/test/java/net/lingala/zip4j/headers/HeaderUtilTest.java
+++ b/src/test/java/net/lingala/zip4j/headers/HeaderUtilTest.java
@@ -141,6 +141,82 @@ public class HeaderUtilTest {
     assertThat(HeaderUtil.getFileHeader(zipModel, "SHOULD_NOT_EXIST")).isNull();
   }
 
+  @Test
+  public void testGetIndexOfFileHeaderWhenZipModelIsNullThrowsException() throws ZipException {
+    expectZipException("input parameters is null, cannot determine index of file header");
+    HeaderUtil.getIndexOfFileHeader(null, new FileHeader());
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderWhenFileHeaderlIsNullThrowsException() throws ZipException {
+    expectZipException("input parameters is null, cannot determine index of file header");
+    HeaderUtil.getIndexOfFileHeader(new ZipModel(), null);
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderWhenCentralDirectoryIsNullReturnsNegativeOne() throws ZipException {
+    ZipModel zipModel = new ZipModel();
+    zipModel.setCentralDirectory(null);
+
+    assertThat(HeaderUtil.getIndexOfFileHeader(zipModel, new FileHeader())).isEqualTo(-1);
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderWhenFileHeadersIsNullReturnsNegativeOne() throws ZipException {
+    ZipModel zipModel = new ZipModel();
+    zipModel.getCentralDirectory().setFileHeaders(null);
+
+    assertThat(HeaderUtil.getIndexOfFileHeader(zipModel, new FileHeader())).isEqualTo(-1);
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderWhenFileHeadersIsEmptyReturnsNegativeOne() throws ZipException {
+    ZipModel zipModel = new ZipModel();
+    zipModel.getCentralDirectory().setFileHeaders(Collections.emptyList());
+
+    assertThat(HeaderUtil.getIndexOfFileHeader(zipModel, new FileHeader())).isEqualTo(-1);
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderWithNullFileNameInFileHeaderThrowsException() throws ZipException {
+    expectZipException("file name in file header is empty or null, cannot determine index of file header");
+
+    ZipModel zipModel = new ZipModel();
+    zipModel.getCentralDirectory().setFileHeaders(Collections.singletonList(new FileHeader()));
+
+    HeaderUtil.getIndexOfFileHeader(zipModel, new FileHeader());
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderWithEmptyFileNameInFileHeaderThrowsException() throws ZipException {
+    expectZipException("file name in file header is empty or null, cannot determine index of file header");
+
+    ZipModel zipModel = new ZipModel();
+    zipModel.getCentralDirectory().setFileHeaders(Collections.singletonList(new FileHeader()));
+    FileHeader fileHeader = new FileHeader();
+    fileHeader.setFileName("");
+
+    HeaderUtil.getIndexOfFileHeader(zipModel, new FileHeader());
+  }
+
+  @Test
+  public void testGetIndexOfFileHeaderGetsIndexSuccessfully() throws ZipException {
+    String fileNamePrefix = "FILE_NAME_";
+    int numberOfEntriesToAdd = 10;
+    List<FileHeader> fileHeadersInZipModel = generateFileHeaderWithFileNamesWithEmptyAndNullFileNames(fileNamePrefix, numberOfEntriesToAdd);
+    ZipModel zipModel = new ZipModel();
+    zipModel.getCentralDirectory().setFileHeaders(fileHeadersInZipModel);
+
+    FileHeader fileHeaderToFind = new FileHeader();
+    for (int i = 0; i < numberOfEntriesToAdd; i++) {
+      fileHeaderToFind.setFileName(fileNamePrefix + i);
+      assertThat(HeaderUtil.getIndexOfFileHeader(zipModel, fileHeaderToFind)).isEqualTo(i);
+    }
+
+    fileHeaderToFind.setFileName(fileNamePrefix + numberOfEntriesToAdd);
+    assertThat(HeaderUtil.getIndexOfFileHeader(zipModel, fileHeaderToFind)).isEqualTo(-1);
+  }
+
   @Test
   public void testDecodeStringWithCharsetForUtf8() {
     String utf8StringToEncode = "asdäüöö";
