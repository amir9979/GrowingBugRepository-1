diff --git a/src/main/java/net/lingala/zip4j/io/inputstream/ZipInputStream.java b/src/main/java/net/lingala/zip4j/io/inputstream/ZipInputStream.java
index 058365f..cba2852 100755
--- a/src/main/java/net/lingala/zip4j/io/inputstream/ZipInputStream.java
+++ b/src/main/java/net/lingala/zip4j/io/inputstream/ZipInputStream.java
@@ -50,8 +50,6 @@ public class ZipInputStream extends InputStream {
   private byte[] endOfEntryBuffer;
   private boolean canSkipExtendedLocalFileHeader = false;
   private Zip4jConfig zip4jConfig;
-  private boolean streamClosed = false;
-  private boolean entryEOFReached = false;
 
   public ZipInputStream(InputStream inputStream) {
     this(inputStream, null, (Charset) null);
@@ -111,7 +109,6 @@ public class ZipInputStream extends InputStream {
     }
 
     this.decompressedInputStream = initializeEntryInputStream(localFileHeader);
-    this.entryEOFReached = false;
     return localFileHeader;
   }
 
@@ -172,13 +169,6 @@ public class ZipInputStream extends InputStream {
     if (decompressedInputStream != null) {
       decompressedInputStream.close();
     }
-    this.streamClosed = true;
-  }
-
-  @Override
-  public int available() throws IOException {
-    assertStreamOpen();
-    return entryEOFReached ? 0 : 1;
   }
 
   private void endOfCompressedDataReached() throws IOException {
@@ -192,7 +182,6 @@ public class ZipInputStream extends InputStream {
     readExtendedLocalFileHeaderIfPresent();
     verifyCrc();
     resetFields();
-    this.entryEOFReached = true;
   }
 
   private DecompressedInputStream initializeEntryInputStream(LocalFileHeader localFileHeader) throws IOException {
@@ -329,16 +318,9 @@ public class ZipInputStream extends InputStream {
     }
 
     while (read(endOfEntryBuffer) != -1);
-    this.entryEOFReached = true;
   }
 
   private boolean isEncryptionMethodZipStandard(LocalFileHeader localFileHeader) {
     return localFileHeader.isEncrypted() && EncryptionMethod.ZIP_STANDARD.equals(localFileHeader.getEncryptionMethod());
   }
-
-  private void assertStreamOpen() throws IOException {
-    if (streamClosed) {
-      throw new IOException("Stream closed");
-    }
-  }
 }
