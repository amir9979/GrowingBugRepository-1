diff --git a/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java b/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java
index cd647565..71348538 100644
--- a/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java
+++ b/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java
@@ -24,10 +24,13 @@ import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.TreeMap;
+import java.util.Map.Entry;
 
 import spoon.Launcher;
 import spoon.reflect.code.CtCodeElement;
@@ -273,7 +276,30 @@ public class CtAnnotationImpl<A extends Annotation> extends CtElementImpl
 
 		Class<?> type = getElementType(key);
 
-		ret = this.convertValue(ret);
+		if (type.isArray()) {
+			if (!(ret instanceof Collection)) {
+				List<Object> lst = new ArrayList<Object>();
+
+				if (ret.getClass().isArray()) {
+					Object[] temp = (Object[]) ret;
+					lst.addAll(Arrays.asList(temp));
+				} else {
+					lst.add(ret);
+				}
+				ret = lst;
+
+			}
+			Collection<?> col = (Collection<?>) ret;
+			Object[] array = (Object[]) Array.newInstance(
+					type.getComponentType(), col.size());
+			int i = 0;
+			for (Object obj : col) {
+				array[i++] = convertValue(obj);
+			}
+			ret = array;
+		} else {
+			ret = convertValue(ret);
+		}
 
 		if (type.isPrimitive()) {
 			if ((type == boolean.class) && (ret.getClass() != boolean.class)) {
