diff --git a/src/test/java/spoon/test/ctClass/CtClassTest.java b/src/test/java/spoon/test/ctClass/CtClassTest.java
index 99f5bb28..93ba6558 100644
--- a/src/test/java/spoon/test/ctClass/CtClassTest.java
+++ b/src/test/java/spoon/test/ctClass/CtClassTest.java
@@ -10,7 +10,6 @@ import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 
-import static org.junit.Assert.assertTrue;
 import static spoon.testing.utils.ModelUtils.build;
 import static spoon.testing.utils.ModelUtils.buildClass;
 import static spoon.testing.utils.ModelUtils.canBeBuilt;
@@ -20,11 +19,8 @@ import java.util.Set;
 import org.junit.Test;
 
 import spoon.Launcher;
-import spoon.reflect.CtModel;
 import spoon.reflect.code.CtBlock;
 import spoon.reflect.code.CtConstructorCall;
-import spoon.reflect.code.CtNewClass;
-import spoon.reflect.declaration.CtAnonymousExecutable;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtConstructor;
 import spoon.reflect.declaration.CtField;
@@ -33,8 +29,6 @@ import spoon.reflect.declaration.ModifierKind;
 import spoon.reflect.factory.Factory;
 import spoon.reflect.reference.CtArrayTypeReference;
 import spoon.reflect.reference.CtTypeReference;
-import spoon.reflect.visitor.filter.TypeFilter;
-import spoon.test.ctClass.testclasses.AnonymousClass;
 import spoon.test.ctClass.testclasses.Foo;
 import spoon.test.ctClass.testclasses.Pozole;
 
@@ -185,60 +179,4 @@ public class CtClassTest {
 
 		canBeBuilt("./target/issue1306", 8, true);
 	}
-
-	@Test
-	public void testCloneAnonymousClassInvocation() {
-    	// contract: after cloning an anonymous class invocation, we still should be able to print it, when not using autoimport
-
-		final Launcher launcher = new Launcher();
-		launcher.addInputResource("./src/test/java/spoon/test/ctClass/testclasses/AnonymousClass.java");
-		launcher.getEnvironment().setAutoImports(false);
-		launcher.buildModel();
-
-		CtModel model = launcher.getModel();
-		CtNewClass newClassInvocation = launcher.getModel().getElements(new TypeFilter<CtNewClass>(CtNewClass.class)).get(0);
-		CtNewClass newClassInvocationCloned = newClassInvocation.clone();
-
-		CtClass anonymousClass = newClassInvocation.getAnonymousClass();
-		CtClass anonymousClassCloned = newClassInvocationCloned.getAnonymousClass();
-
-		// The test stops failing if we set the parent below
-		//newClassInvocationCloned.setParent(launcher.getFactory().Class().get(AnonymousClass.class));
-
-		assertEquals(0, anonymousClass.getAllFields().size());
-		assertEquals(0, anonymousClassCloned.getAllFields().size());
-
-		assertTrue(newClassInvocation.toString().length() > 0);
-		assertTrue(newClassInvocationCloned.toString().length() > 0);
-
-		assertEquals(newClassInvocation.toString(), newClassInvocationCloned.toString());
-	}
-
-	@Test
-	public void testCloneAnonymousClassInvocationWithAutoimports() {
-		// contract: after cloning an anonymous class invocation, we still should be able to print it, when using autoimport
-
-		final Launcher launcher = new Launcher();
-		launcher.addInputResource("./src/test/java/spoon/test/ctClass/testclasses/AnonymousClass.java");
-		launcher.getEnvironment().setAutoImports(true);
-		launcher.buildModel();
-
-		CtModel model = launcher.getModel();
-		CtNewClass newClassInvocation = launcher.getModel().getElements(new TypeFilter<CtNewClass>(CtNewClass.class)).get(0);
-		CtNewClass newClassInvocationCloned = newClassInvocation.clone();
-
-		CtClass anonymousClass = newClassInvocation.getAnonymousClass();
-		CtClass anonymousClassCloned = newClassInvocationCloned.getAnonymousClass();
-
-		// The test stops failing if we set the parent below
-		//newClassInvocationCloned.setParent(launcher.getFactory().Class().get(AnonymousClass.class));
-
-		assertEquals(0, anonymousClass.getAllFields().size());
-		assertEquals(0, anonymousClassCloned.getAllFields().size());
-
-		assertTrue(newClassInvocation.toString().length() > 0);
-		assertTrue(newClassInvocationCloned.toString().length() > 0);
-
-		assertEquals(newClassInvocation.toString(), newClassInvocationCloned.toString());
-	}
 }
diff --git a/src/test/java/spoon/test/ctClass/testclasses/AnonymousClass.java b/src/test/java/spoon/test/ctClass/testclasses/AnonymousClass.java
deleted file mode 100644
index 6e913cca..00000000
--- a/src/test/java/spoon/test/ctClass/testclasses/AnonymousClass.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package spoon.test.ctClass.testclasses;
-
-import java.util.Comparator;
-
-/**
- * Created by urli on 11/10/2017.
- */
-public class AnonymousClass {
-
-    final int machin = new Comparator<Integer>() {
-
-        @Override
-        public int compare(Integer o1, Integer o2) {
-            return 0;
-        }
-    }.compare(1,2);
-}
