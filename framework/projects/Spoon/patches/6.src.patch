diff --git a/src/main/java/spoon/compiler/Environment.java b/src/main/java/spoon/compiler/Environment.java
index 5b7e714f..e36cd53c 100644
--- a/src/main/java/spoon/compiler/Environment.java
+++ b/src/main/java/spoon/compiler/Environment.java
@@ -284,4 +284,4 @@ public interface Environment {
 	 * class path returned by {@link getSourceClassPath()} 
 	 */
 	ClassLoader getClassLoader();
-}
\ No newline at end of file
+}
diff --git a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java
index 35a31bb5..418e0381 100644
--- a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java
@@ -17,11 +17,16 @@
 
 package spoon.support.reflect.reference;
 
+import java.io.File;
+import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.AnnotatedElement;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -136,15 +141,34 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements
 	 */
 	@SuppressWarnings("unchecked")
 	protected Class<T> findClass() {
+		URLClassLoader loader = new URLClassLoader(classpath(), Thread.currentThread().getContextClassLoader());
 		try {
-			return  (Class<T>)  getFactory().getEnvironment().getClassLoader().loadClass(getQualifiedName());
+			return (Class<T>) loader.loadClass(getQualifiedName());
 		} catch (ClassNotFoundException cnfe) {
 			throw new SpoonException("cannot load class: "
 					+ getQualifiedName() + " with class loader "
 					+ Thread.currentThread().getContextClassLoader(), cnfe);
+		} finally {
+			try {
+				loader.close();
+			}
+			catch (IOException ioe) {}
 		}
 	}
 	
+	protected URL[] classpath() {
+		String[] classpath = getFactory().getEnvironment().getSourceClasspath();
+		int length = (classpath == null) ? 0 : classpath.length;
+		URL[] urls = new URL[length];
+		for (int i = 0; i < length; i += 1) {
+			try {
+				urls[i] = new File(classpath[i]).toURI().toURL();
+			} catch (MalformedURLException e) {
+				throw new IllegalStateException("Invalid classpath: " + classpath, e);
+			}
+		}
+		return urls;
+	}
 	public List<CtTypeReference<?>> getActualTypeArguments() {
 		return actualTypeArguments;
 	}
