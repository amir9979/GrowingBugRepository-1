diff --git a/src/main/java/org/shredzone/commons/suncalc/MoonTimes.java b/src/main/java/org/shredzone/commons/suncalc/MoonTimes.java
index 5f14b0f..8e70010 100644
--- a/src/main/java/org/shredzone/commons/suncalc/MoonTimes.java
+++ b/src/main/java/org/shredzone/commons/suncalc/MoonTimes.java
@@ -119,40 +119,32 @@ public final class MoonTimes {
             boolean alwaysUp = false;
             boolean alwaysDown = false;
 
-            int hour = 0;
+            double y_minus = correctedMoonHeight(jd);
             int maxHours = fullCycle ? 365 * 24 : 24;
+            for (int hour = 1; hour < maxHours; hour += 2) {
+                double y_0 = correctedMoonHeight(jd.atHour(hour));
+                double y_plus = correctedMoonHeight(jd.atHour(hour + 1.0));
 
-            double y_minus = correctedMoonHeight(jd.atHour(hour - 1.0));
-            double y_0 = correctedMoonHeight(jd.atHour(hour));
-            double y_plus = correctedMoonHeight(jd.atHour(hour + 1.0));
 
-            while (hour <= maxHours) {
                 QuadraticInterpolation qi = new QuadraticInterpolation(y_minus, y_0, y_plus);
                 double ye = qi.getYe();
 
                 if (qi.getNumberOfRoots() == 1) {
-                    double rt = qi.getRoot1() + hour;
                     if (y_minus < 0.0) {
-                        if (rise == null && rt >= 0.0) {
-                            rise = rt;
+                        if (rise == null) {
+                            rise = qi.getRoot1() + hour;
                         }
                     } else {
-                        if (set == null && rt >= 0.0) {
-                            set = rt;
+                        if (set == null) {
+                            set = qi.getRoot1() + hour;
                         }
                     }
                 } else if (qi.getNumberOfRoots() == 2) {
                     if (rise == null) {
-                        double rt = hour + (ye < 0.0 ? qi.getRoot2() : qi.getRoot1());
-                        if (rt >= 0.0) {
-                            rise = rt;
-                        }
+                        rise = hour + (ye < 0.0 ? qi.getRoot2() : qi.getRoot1());
                     }
                     if (set == null) {
-                        double rt = hour + (ye < 0.0 ? qi.getRoot1() : qi.getRoot2());
-                        if (rt >= 0.0) {
-                            set = rt;
-                        }
+                        set = hour + (ye < 0.0 ? qi.getRoot1() : qi.getRoot2());
                     }
                 }
 
@@ -165,19 +157,8 @@ public final class MoonTimes {
                     break;
                 }
 
-                hour++;
-                y_minus = y_0;
-                y_0 = y_plus;
-                y_plus = correctedMoonHeight(jd.atHour(hour + 1.0));
-            }
+                y_minus = y_plus;
 
-            if (!fullCycle) {
-                if (rise != null && rise >= 24.0) {
-                    rise = null;
-                }
-                if (set != null && set >= 24.0) {
-                    set = null;
-                }
             }
 
             return new MoonTimes(
diff --git a/src/main/java/org/shredzone/commons/suncalc/SunTimes.java b/src/main/java/org/shredzone/commons/suncalc/SunTimes.java
index d43dfd4..a9bc319 100644
--- a/src/main/java/org/shredzone/commons/suncalc/SunTimes.java
+++ b/src/main/java/org/shredzone/commons/suncalc/SunTimes.java
@@ -278,59 +278,48 @@ public class SunTimes {
             boolean alwaysDown = false;
             double ye;
 
-            int hour = 0;
-            int maxHours = fullCycle ? 365 * 24 : 24;
-
-            double y_minus = correctedSunHeight(jd.atHour(hour - 1.0));
-            double y_0 = correctedSunHeight(jd.atHour(hour));
-            double y_plus = correctedSunHeight(jd.atHour(hour + 1.0));
-
-            if (y_0 > 0.0) {
+            double y_minus = correctedSunHeight(jd);
+            if (y_minus > 0.0) {
                 alwaysUp = true;
             } else {
                 alwaysDown = true;
             }
 
-            while (hour <= maxHours) {
+            int maxHours = fullCycle ? 365 * 24 : 24;
+            for (int hour = 1; hour < maxHours; hour++) {
+                double y_0 = correctedSunHeight(jd.atHour(hour));
+                double y_plus = correctedSunHeight(jd.atHour(hour + 1.0));
+
                 QuadraticInterpolation qi = new QuadraticInterpolation(y_minus, y_0, y_plus);
                 ye = qi.getYe();
 
                 if (qi.getNumberOfRoots() == 1) {
-                    double rt = qi.getRoot1() + hour;
                     if (y_minus < 0.0) {
-                        if (rise == null && rt >= 0.0) {
-                            rise = rt;
+                        if (rise == null) {
+                            rise = qi.getRoot1() + hour;
                         }
                     } else {
-                        if (set == null && rt >= 0.0) {
-                            set = rt;
+                        if (set == null) {
+                            set = qi.getRoot1() + hour;
                         }
                     }
                 } else if (qi.getNumberOfRoots() == 2) {
                     if (rise == null) {
-                        double rt = hour + (ye < 0.0 ? qi.getRoot2() : qi.getRoot1());
-                        if (rt >= 0.0) {
-                            rise = rt;
-                        }
+                        rise = hour + (ye < 0.0 ? qi.getRoot2() : qi.getRoot1());
                     }
                     if (set == null) {
-                        double rt = hour + (ye < 0.0 ? qi.getRoot1() : qi.getRoot2());
-                        if (rt >= 0.0) {
-                            set = rt;
-                        }
+                        set = hour + (ye < 0.0 ? qi.getRoot1() : qi.getRoot2());
                     }
                 }
 
-                if (hour <= 24) {
+                if (hour < 24) {
                     double xeAbs = Math.abs(qi.getXe());
                     if (xeAbs <= 1.0) {
                         double xeHour = qi.getXe() + hour;
-                        if (xeHour >= 0.0 && xeHour < 24.0) {
-                            if (qi.isMaximum()) {
-                                noon = xeHour;
-                            } else {
-                                nadir = xeHour;
-                            }
+                        if (qi.isMaximum()) {
+                            noon = xeHour;
+                        } else {
+                            nadir = xeHour;
                         }
                     }
                 }
@@ -348,19 +337,7 @@ public class SunTimes {
                     break;
                 }
 
-                hour++;
                 y_minus = y_0;
-                y_0 = y_plus;
-                y_plus = correctedSunHeight(jd.atHour(hour + 1.0));
-            }
-
-            if (!fullCycle) {
-                if (rise != null && rise >= 24.0) {
-                    rise = null;
-                }
-                if (set != null && set >= 24.0) {
-                    set = null;
-                }
             }
 
             return new SunTimes(
