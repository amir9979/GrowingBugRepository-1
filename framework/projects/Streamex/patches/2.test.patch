diff --git a/src/test/java/one/util/streamex/EntryStreamTest.java b/src/test/java/one/util/streamex/EntryStreamTest.java
index 2ac73d5..4859516 100644
--- a/src/test/java/one/util/streamex/EntryStreamTest.java
+++ b/src/test/java/one/util/streamex/EntryStreamTest.java
@@ -33,7 +33,6 @@ import java.util.Random;
 import java.util.Map.Entry;
 import java.util.SortedMap;
 import java.util.TreeMap;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.function.Function;
@@ -272,10 +271,6 @@ public class EntryStreamTest {
         assertEquals(EntryStream.of(createMap()).toList(), EntryStream.empty().append("a", 1, "bb", 22, "ccc", 33)
                 .toList());
         checkAsString("bb->22;a->1;ccc->33", EntryStream.of("bb", 22).append("a", 1, "ccc", 33));
-        
-        EntryStream<String, Integer> stream = EntryStream.of("a", 1, "b", 2);
-        assertSame(stream, stream.append(Collections.emptyMap()));
-        assertNotSame(stream, stream.append(new ConcurrentHashMap<>()));
     }
 
     @Test
@@ -284,10 +279,6 @@ public class EntryStreamTest {
             5).filterKeys(k -> k.length() > 1).values().toList());
         checkAsString("a->1;ccc->33;bb->22", EntryStream.of("bb", 22).prepend("a", 1, "ccc", 33));
         checkAsString("a->1;ccc->33;dddd->40;bb->22", EntryStream.of("bb", 22).prepend("a", 1, "ccc", 33, "dddd", 40));
-
-        EntryStream<String, Integer> stream = EntryStream.of("a", 1, "b", 2);
-        assertSame(stream, stream.prepend(Collections.emptyMap()));
-        assertNotSame(stream, stream.prepend(new ConcurrentHashMap<>()));
     }
 
     @Test
diff --git a/src/test/java/one/util/streamex/StreamExTest.java b/src/test/java/one/util/streamex/StreamExTest.java
index 56a6e70..cb65ea7 100644
--- a/src/test/java/one/util/streamex/StreamExTest.java
+++ b/src/test/java/one/util/streamex/StreamExTest.java
@@ -46,7 +46,6 @@ import java.util.Spliterator;
 import java.util.TreeSet;
 import java.util.Vector;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -407,9 +406,8 @@ public class StreamExTest {
         StreamEx<Integer> s = StreamEx.of(1, 2, 3);
         assertSame(s, s.append());
         assertSame(s, s.append(Collections.emptyList()));
-        assertSame(s, s.append(new ArrayList<>()));
-        assertSame(s, s.append(Stream.empty()));
-        assertNotSame(s, s.append(new ConcurrentLinkedQueue<>()));
+        assertSame(s, s.prepend());
+        assertSame(s, s.prepend(Collections.emptyList()));
     }
 
     @Test
@@ -426,23 +424,6 @@ public class StreamExTest {
         }
         assertArrayEquals(new Object[] { 1, 2, 3, 1, 1 }, StreamEx.constant(1, Long.MAX_VALUE - 1).prepend(1, 2, 3)
                 .limit(5).toArray());
-        
-        assertEquals(asList(4,3,2,1), StreamEx.of(1).prepend(2).prepend(StreamEx.of(3).prepend(4)).toList());
-
-        StreamEx<Integer> s = StreamEx.of(1, 2, 3);
-        assertSame(s, s.prepend());
-        assertSame(s, s.prepend(Collections.emptyList()));
-        assertSame(s, s.prepend(new ArrayList<>()));
-        assertSame(s, s.prepend(Stream.empty()));
-        assertNotSame(s, s.prepend(new ConcurrentLinkedQueue<>()));
-    }
-    
-    @Test
-    public void testPrependTSO() {
-        List<Integer> expected = IntStreamEx.rangeClosed(19999, 0, -1).boxed().toList();
-        assertEquals(expected, IntStreamEx.range(20000).mapToObj(StreamEx::of).reduce(StreamEx::prepend).get().toList());
-        assertEquals(expected, IntStreamEx.range(20000).parallel().mapToObj(StreamEx::of).reduce(StreamEx::prepend)
-                .get().toList());
     }
 
     @Test
