diff --git a/src/test/java/org/eluder/coveralls/maven/plugin/AbstractCoverallsMojoTest.java b/src/test/java/org/eluder/coveralls/maven/plugin/AbstractCoverallsMojoTest.java
index 03932ee..3408b2d 100644
--- a/src/test/java/org/eluder/coveralls/maven/plugin/AbstractCoverallsMojoTest.java
+++ b/src/test/java/org/eluder/coveralls/maven/plugin/AbstractCoverallsMojoTest.java
@@ -26,12 +26,6 @@ package org.eluder.coveralls.maven.plugin;
  * %[license]
  */
 
-import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.*;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.*;
-
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -62,6 +56,17 @@ import org.mockito.invocation.InvocationOnMock;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockito.stubbing.Answer;
 
+import static org.hamcrest.Matchers.containsString;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
 @RunWith(MockitoJUnitRunner.class)
 public abstract class AbstractCoverallsMojoTest {
     
@@ -182,7 +187,7 @@ public abstract class AbstractCoverallsMojoTest {
 
     @Test(expected = MojoFailureException.class)
     public void testFailedSubmission() throws Exception {
-        when(coverallsClientMock.submit(any(File.class))).thenThrow(ProcessingException.class);
+        when(coverallsClientMock.submit(any(File.class))).thenReturn(new CoverallsResponse("failure", true, null));
         mojo.execute();
     }
     
diff --git a/src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsClientTest.java b/src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsClientTest.java
index 4da0989..ecae03c 100644
--- a/src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsClientTest.java
+++ b/src/test/java/org/eluder/coveralls/maven/plugin/httpclient/CoverallsClientTest.java
@@ -26,7 +26,7 @@ package org.eluder.coveralls.maven.plugin.httpclient;
  * %[license]
  */
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.when;
 
@@ -35,14 +35,10 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
-import org.apache.http.HttpVersion;
-import org.apache.http.StatusLine;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.message.BasicStatusLine;
 import org.eluder.coveralls.maven.plugin.ProcessingException;
 import org.eluder.coveralls.maven.plugin.domain.CoverallsResponse;
 import org.junit.Before;
@@ -53,6 +49,8 @@ import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
+
 @RunWith(MockitoJUnitRunner.class)
 public class CoverallsClientTest {
 
@@ -92,37 +90,13 @@ public class CoverallsClientTest {
     
     @Test(expected = ProcessingException.class)
     public void testParseInvalidResponse() throws Exception {
-        StatusLine statusLine = new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK");
         when(httpClientMock.execute(any(HttpUriRequest.class))).thenReturn(httpResponseMock);
-        when(httpResponseMock.getStatusLine()).thenReturn(statusLine);
         when(httpResponseMock.getEntity()).thenReturn(httpEntityMock);
         when(httpEntityMock.getContent()).thenReturn(new ByteArrayInputStream("{bogus}".getBytes()));
         CoverallsClient client = new CoverallsClient("http://test.com/coveralls", httpClientMock, new ObjectMapper());
         client.submit(file);
     }
     
-    @Test(expected = ProcessingException.class)
-    public void testParseErrorousResponse() throws Exception {
-        StatusLine statusLine = new BasicStatusLine(HttpVersion.HTTP_1_1, 400, "Bad Request");
-        when(httpClientMock.execute(any(HttpUriRequest.class))).thenReturn(httpResponseMock);
-        when(httpResponseMock.getStatusLine()).thenReturn(statusLine);
-        when(httpResponseMock.getEntity()).thenReturn(httpEntityMock);
-        when(httpEntityMock.getContent()).thenReturn(coverallsResponse(new CoverallsResponse("failure", true, "submission failed")));
-        CoverallsClient client = new CoverallsClient("http://test.com/coveralls", httpClientMock, new ObjectMapper());
-        client.submit(file);
-    }
-    
-    @Test(expected = IOException.class)
-    public void testParseFailingEntity() throws Exception {
-        StatusLine statusLine = new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK");
-        when(httpClientMock.execute(any(HttpUriRequest.class))).thenReturn(httpResponseMock);
-        when(httpResponseMock.getStatusLine()).thenReturn(statusLine);
-        when(httpResponseMock.getEntity()).thenReturn(httpEntityMock);
-        when(httpEntityMock.getContent()).thenThrow(IOException.class);
-        CoverallsClient client = new CoverallsClient("http://test.com/coveralls", httpClientMock, new ObjectMapper());
-        client.submit(file);
-    }
-    
     private InputStream coverallsResponse(final CoverallsResponse coverallsResponse) throws Exception {
         String content = new ObjectMapper().writeValueAsString(coverallsResponse);
         return new ByteArrayInputStream(content.getBytes());
