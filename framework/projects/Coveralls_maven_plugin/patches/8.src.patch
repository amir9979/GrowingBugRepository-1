diff --git a/src/main/java/org/eluder/coveralls/maven/plugin/Environment.java b/src/main/java/org/eluder/coveralls/maven/plugin/Environment.java
index 696ed4f..9782d34 100644
--- a/src/main/java/org/eluder/coveralls/maven/plugin/Environment.java
+++ b/src/main/java/org/eluder/coveralls/maven/plugin/Environment.java
@@ -26,8 +26,12 @@ package org.eluder.coveralls.maven.plugin;
  * %[license]
  */
 
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Properties;
 
+import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.util.StringUtils;
 import org.eluder.coveralls.maven.plugin.service.ServiceSetup;
 
@@ -51,8 +55,8 @@ public final class Environment {
     }
     
     public void setup() {
+        setupSourceDirectories();
         setupService();
-        verify();
     }
     
     private void verify() {
@@ -60,6 +64,29 @@ public final class Environment {
             throw new IllegalArgumentException("Source encoding not set, use <sourceEncoding> configuration option or set project wide property <project.build.sourceEncoding>");
         }
     }
+    private void setupSourceDirectories() {
+        if (mojo.sourceDirectories == null || mojo.sourceDirectories.isEmpty()) {
+            List<File> directories = new ArrayList<File>();
+            collectSourceDirectories(mojo.project, directories);
+            mojo.sourceDirectories = directories;
+        }
+        if (mojo.sourceDirectories == null || mojo.sourceDirectories.isEmpty()) {
+            throw new IllegalArgumentException("No source directories set up");
+        }
+        logSourceDirectories();
+    }
+    
+    private void collectSourceDirectories(final MavenProject project, final List<File> directories) {
+        for (String sourceRoot : project.getCompileSourceRoots()) {
+            File directory = new File(sourceRoot);
+            if (directory.exists() && directory.isDirectory()) {
+                directories.add(directory);
+            }
+        }
+        for (MavenProject collectedProject : project.getCollectedProjects()) {
+            collectSourceDirectories(collectedProject, directories);
+        }
+    }
     
     private void setupService() {
         for (ServiceSetup service : services) {
@@ -107,4 +134,13 @@ public final class Environment {
             mojo.serviceEnvironment = environment;
         }
     }
+    
+    private void logSourceDirectories() {
+        if (mojo.getLog().isDebugEnabled()) {
+            mojo.getLog().debug("Using " + mojo.sourceDirectories.size() + " source directories to scan source files:");
+            for (File sourceDirectory : mojo.sourceDirectories) {
+                mojo.getLog().debug("- " + sourceDirectory.getAbsolutePath());
+            }
+        }
+    }
 }
