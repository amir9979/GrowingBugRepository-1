diff --git a/src/test/java/org/jfree/data/general/DatasetUtilsTest.java b/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
index 545d34a3..b49a4c92 100644
--- a/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
+++ b/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
@@ -2,7 +2,7 @@
  * JFreeChart : a free chart library for the Java(tm) platform
  * ===========================================================
  *
- * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
+ * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors.
  *
  * Project Info:  http://www.jfree.org/jfreechart/index.html
  *
@@ -27,11 +27,27 @@
  * ---------------------
  * DatasetUtilsTest.java
  * ---------------------
- * (C) Copyright 2003-2020, by Object Refinery Limited and Contributors.
+ * (C) Copyright 2003-2017, by Object Refinery Limited and Contributors.
  *
  * Original Author:  David Gilbert (for Object Refinery Limited);
  * Contributor(s):   -;
  *
+ * Changes
+ * -------
+ * 18-Sep-2003 : Version 1 (DG);
+ * 23-Mar-2004 : Added test for maximumStackedRangeValue() method (DG);
+ * 04-Oct-2004 : Eliminated NumberUtils usage (DG);
+ * 07-Jan-2005 : Updated for method name changes (DG);
+ * 03-Feb-2005 : Added testFindStackedRangeBounds2() method (DG);
+ * 26-Sep-2007 : Added testIsEmptyOrNullXYDataset() method (DG);
+ * 28-Mar-2008 : Added and renamed various tests (DG);
+ * 08-Oct-2008 : New tests to support patch 2131001 and related 
+ *               changes (DG);
+ * 25-Mar-2009 : Added tests for new iterateToFindRangeBounds() method (DG);
+ * 16-May-2009 : Added
+ *               testIterateToFindRangeBounds_MultiValueCategoryDataset() (DG);
+ * 10-Sep-2009 : Added tests for bug 2849731 (DG);
+ *
  */
 
 package org.jfree.data.general;
@@ -57,7 +73,6 @@ import org.jfree.data.xy.DefaultIntervalXYDataset;
 import org.jfree.data.xy.DefaultTableXYDataset;
 import org.jfree.data.xy.DefaultXYDataset;
 import org.jfree.data.xy.IntervalXYDataset;
-import org.jfree.data.xy.IntervalXYZDataset;
 import org.jfree.data.xy.TableXYDataset;
 import org.jfree.data.xy.XYDataset;
 import org.jfree.data.xy.XYIntervalSeries;
@@ -369,18 +384,18 @@ public class DatasetUtilsTest {
     public void testIterateRangeBounds3_CategoryDataset() {
         Number[][] starts = new Double[2][3];
         Number[][] ends = new Double[2][3];
-        starts[0][0] = 1.0;
-        starts[0][1] = 2.0;
-        starts[0][2] = 3.0;
-        starts[1][0] = 11.0;
-        starts[1][1] = 12.0;
-        starts[1][2] = 13.0;
-        ends[0][0] = 4.0;
-        ends[0][1] = 5.0;
-        ends[0][2] = 6.0;
-        ends[1][0] = 16.0;
-        ends[1][1] = 15.0;
-        ends[1][2] = 14.0;
+        starts[0][0] = new Double(1.0);
+        starts[0][1] = new Double(2.0);
+        starts[0][2] = new Double(3.0);
+        starts[1][0] = new Double(11.0);
+        starts[1][1] = new Double(12.0);
+        starts[1][2] = new Double(13.0);
+        ends[0][0] = new Double(4.0);
+        ends[0][1] = new Double(5.0);
+        ends[0][2] = new Double(6.0);
+        ends[1][0] = new Double(16.0);
+        ends[1][1] = new Double(15.0);
+        ends[1][2] = new Double(14.0);
 
         DefaultIntervalCategoryDataset d = new DefaultIntervalCategoryDataset(
                 starts, ends);
@@ -498,7 +513,7 @@ public class DatasetUtilsTest {
     public void testFindMinimumDomainValue() {
         XYDataset dataset = createXYDataset1();
         Number minimum = DatasetUtils.findMinimumDomainValue(dataset);
-        assertEquals(1.0, minimum);
+        assertEquals(new Double(1.0), minimum);
     }
 
     /**
@@ -508,7 +523,7 @@ public class DatasetUtilsTest {
     public void testFindMaximumDomainValue() {
         XYDataset dataset = createXYDataset1();
         Number maximum = DatasetUtils.findMaximumDomainValue(dataset);
-        assertEquals(3.0, maximum);
+        assertEquals(new Double(3.0), maximum);
     }
 
     /**
@@ -518,11 +533,11 @@ public class DatasetUtilsTest {
     public void testFindMinimumRangeValue() {
         CategoryDataset d1 = createCategoryDataset1();
         Number min1 = DatasetUtils.findMinimumRangeValue(d1);
-        assertEquals(1.0, min1);
+        assertEquals(new Double(1.0), min1);
 
         XYDataset d2 = createXYDataset1();
         Number min2 = DatasetUtils.findMinimumRangeValue(d2);
-        assertEquals(100.0, min2);
+        assertEquals(new Double(100.0), min2);
     }
 
     /**
@@ -532,11 +547,11 @@ public class DatasetUtilsTest {
     public void testFindMaximumRangeValue() {
         CategoryDataset d1 = createCategoryDataset1();
         Number max1 = DatasetUtils.findMaximumRangeValue(d1);
-        assertEquals(6.0, max1);
+        assertEquals(new Double(6.0), max1);
 
         XYDataset dataset = createXYDataset1();
         Number maximum = DatasetUtils.findMaximumRangeValue(dataset);
-        assertEquals(105.0, maximum);
+        assertEquals(new Double(105.0), maximum);
     }
 
     /**
@@ -687,7 +702,7 @@ public class DatasetUtilsTest {
         double v4 = 32.4;
         double v5 = 26.3;
         double v6 = 22.6;
-        Number answer = Math.max(v1 + v2 + v3, v4 + v5 + v6);
+        Number answer = new Double(Math.max(v1 + v2 + v3, v4 + v5 + v6));
         DefaultCategoryDataset d = new DefaultCategoryDataset();
         d.addValue(v1, "Row 0", "Column 0");
         d.addValue(v2, "Row 1", "Column 0");
@@ -865,7 +880,7 @@ public class DatasetUtilsTest {
         assertEquals("Item 2", d2.getKey(0));
         assertEquals("Item 3", d2.getKey(1));
         assertEquals("Other", d2.getKey(2));
-        assertEquals(2.0, d2.getValue("Other"));
+        assertEquals(new Double(2.0), d2.getValue("Other"));
 
     }
 
@@ -1256,23 +1271,24 @@ public class DatasetUtilsTest {
     public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {
         DefaultMultiValueCategoryDataset dataset
                 = new DefaultMultiValueCategoryDataset();
-        List<String> visibleSeriesKeys = new ArrayList();
+        List visibleSeriesKeys = new ArrayList();
         assertNull(DatasetUtils.iterateToFindRangeBounds(dataset,
                 visibleSeriesKeys, true));
-        List<Double> values = Arrays.asList(new Double[] {1.0});
+        List values = Arrays.asList(new Double[] {new Double(1.0)});
         dataset.add(values, "R1", "C1");
         visibleSeriesKeys.add("R1");
         assertEquals(new Range(1.0, 1.0),
                 DatasetUtils.iterateToFindRangeBounds(dataset,
                 visibleSeriesKeys, true));
 
-        values = Arrays.asList(new Double[] {2.0, 3.0});
+        values = Arrays.asList(new Double[] {new Double(2.0), new Double(3.0)});
         dataset.add(values, "R1", "C2");
         assertEquals(new Range(1.0, 3.0),
                 DatasetUtils.iterateToFindRangeBounds(dataset,
                 visibleSeriesKeys, true));
 
-        values = Arrays.asList(new Double[] {-1.0, -2.0});
+        values = Arrays.asList(new Double[] {new Double(-1.0),
+                new Double(-2.0)});
         dataset.add(values, "R2", "C1");
         assertEquals(new Range(1.0, 3.0),
                 DatasetUtils.iterateToFindRangeBounds(dataset,
@@ -1305,7 +1321,7 @@ public class DatasetUtilsTest {
                 DatasetUtils.iterateRangeBounds(d));
 
         d = new TestIntervalCategoryDataset();
-        d.addItem(null, 2.0, 3.0, "R1", "C1");
+        d.addItem(null, new Double(2.0), new Double(3.0), "R1", "C1");
         assertEquals(new Range(2.0, 3.0),
                 DatasetUtils.iterateRangeBounds(d));
 
@@ -1315,17 +1331,17 @@ public class DatasetUtilsTest {
         assertNull(DatasetUtils.iterateRangeBounds(d));
 
         d = new TestIntervalCategoryDataset();
-        d.addItem(1.0, null, null, "R1", "C1");
+        d.addItem(new Double(1.0), null, null, "R1", "C1");
         assertEquals(new Range(1.0, 1.0),
                 DatasetUtils.iterateRangeBounds(d));
 
         d = new TestIntervalCategoryDataset();
-        d.addItem(null, 1.0, null, "R1", "C1");
+        d.addItem(null, new Double(1.0), null, "R1", "C1");
         assertEquals(new Range(1.0, 1.0),
                 DatasetUtils.iterateRangeBounds(d));
 
         d = new TestIntervalCategoryDataset();
-        d.addItem(null, null, 1.0, "R1", "C1");
+        d.addItem(null, null, new Double(1.0), "R1", "C1");
         assertEquals(new Range(1.0, 1.0),
                 DatasetUtils.iterateRangeBounds(d));
     }
@@ -1337,7 +1353,7 @@ public class DatasetUtilsTest {
     public void testBug2849731() {
         TestIntervalCategoryDataset d = new TestIntervalCategoryDataset();
         d.addItem(2.5, 2.0, 3.0, "R1", "C1");
-        d.addItem(4.0, null, null, "R2", "C1");
+        d.addItem(new Double(4.0), null, null, "R2", "C1");
         assertEquals(new Range(2.0, 4.0),
                 DatasetUtils.iterateRangeBounds(d));
     }
@@ -1467,30 +1483,4 @@ public class DatasetUtilsTest {
         assertTrue(Double.isNaN(DatasetUtils.findYValue(dataset, 0, 3.0)));
     }
 
-    @Test
-    public void testFindZBounds() {
-        IntervalXYZDataset dataset = new TestIntervalXYZDataset(2, 3);
-        assertEquals(0.0, dataset.getZValue(0, 0), EPSILON);
-        assertEquals(3.0, dataset.getZValue(0, 1), EPSILON);
-        assertEquals(6.0, dataset.getZValue(0, 2), EPSILON);
-        assertEquals(9.0, dataset.getZValue(1, 0), EPSILON);
-        assertEquals(12.0, dataset.getZValue(1, 1), EPSILON);
-        assertEquals(15.0, dataset.getZValue(1, 2), EPSILON);
-        assertEquals(-2.5, dataset.getStartZValue(0, 0).doubleValue(), EPSILON);
-        assertEquals(0.5, dataset.getStartZValue(0, 1).doubleValue(), EPSILON);
-        assertEquals(3.5, dataset.getStartZValue(0, 2).doubleValue(), EPSILON);
-        assertEquals(6.5, dataset.getStartZValue(1, 0).doubleValue(), EPSILON);
-        assertEquals(9.5, dataset.getStartZValue(1, 1).doubleValue(), EPSILON);
-        assertEquals(12.5, dataset.getStartZValue(1, 2).doubleValue(), EPSILON);
-        assertEquals(2.5, dataset.getEndZValue(0, 0).doubleValue(), EPSILON);
-        assertEquals(5.5, dataset.getEndZValue(0, 1).doubleValue(), EPSILON);
-        assertEquals(8.5, dataset.getEndZValue(0, 2).doubleValue(), EPSILON);
-        assertEquals(11.5, dataset.getEndZValue(1, 0).doubleValue(), EPSILON);
-        assertEquals(14.5, dataset.getEndZValue(1, 1).doubleValue(), EPSILON);
-        assertEquals(17.5, dataset.getEndZValue(1, 2).doubleValue(), EPSILON);
-        
-        // https://github.com/jfree/jfreechart/issues/141
-        assertEquals(new Range(-2.5, 17.5), DatasetUtils.findZBounds(dataset));
-        assertEquals(new Range(0.0, 15.0), DatasetUtils.findZBounds(dataset, false));
-    }
 }
diff --git a/src/test/java/org/jfree/data/general/TestIntervalXYZDataset.java b/src/test/java/org/jfree/data/general/TestIntervalXYZDataset.java
deleted file mode 100644
index 54e9a929..00000000
--- a/src/test/java/org/jfree/data/general/TestIntervalXYZDataset.java
+++ /dev/null
@@ -1,172 +0,0 @@
-/* ===========================================================
- * JFreeChart : a free chart library for the Java(tm) platform
- * ===========================================================
- *
- * (C) Copyright 2000-2020, by Object Refinery Limited and Contributors.
- *
- * Project Info:  http://www.jfree.org/jfreechart/index.html
- *
- * This library is free software; you can redistribute it and/or modify it
- * under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation; either version 2.1 of the License, or
- * (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
- * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
- * License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
- * USA.
- *
- * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
- * Other names may be trademarks of their respective owners.]
- *
- * ---------------------------
- * TestIntervalXYZDataset.java
- * ---------------------------
- * (C) Copyright 2020, by Object Refinery Limited.
- *
- * Original Author:  David Gilbert (for Object Refinery Limited);
- * Contributor(s):   -;
- *
- */
-
-package org.jfree.data.general;
-
-import org.jfree.data.DomainOrder;
-import org.jfree.data.xy.IntervalXYZDataset;
-
-/**
- * An implementation of the {@link IntervalXYZDataset} interface that can be
- * used for testing.
- */
-public class TestIntervalXYZDataset implements IntervalXYZDataset {
-
-    private DatasetGroup group;
-    
-    private final int seriesCount;
-    
-    private final int itemCount;
-    
-    /**
-     * Creates a new instance.
-     * 
-     * @param seriesCount  the number of series.
-     * @param itemCount  the number of items per series.
-     */
-    public TestIntervalXYZDataset(int seriesCount, int itemCount) {
-        this.seriesCount = seriesCount;
-        this.itemCount = itemCount;
-    }
-    
-    @Override
-    public Number getStartXValue(int series, int item) {
-        return getXValue(series, item) - 0.5;
-    }
-
-    @Override
-    public Number getEndXValue(int series, int item) {
-        return getXValue(series, item) + 0.5;
-    }
-
-    @Override
-    public Number getStartYValue(int series, int item) {
-        return getYValue(series, item) - 1.5;
-    }
-
-    @Override
-    public Number getEndYValue(int series, int item) {
-        return getYValue(series, item) + 1.5;
-    }
-
-    @Override
-    public Number getStartZValue(int series, int item) {
-        return getZValue(series, item) - 2.5;
-    }
-
-    @Override
-    public Number getEndZValue(int series, int item) {
-        return getZValue(series, item) + 2.5;
-    }
-
-    @Override
-    public Number getZ(int series, int item) {
-        return getZValue(series, item);
-    }
-
-    @Override
-    public double getZValue(int series, int item) {
-        return 3 * getXValue(series, item);
-    }
-
-    @Override
-    public DomainOrder getDomainOrder() {
-        return DomainOrder.ASCENDING;
-    }
-
-    @Override
-    public int getItemCount(int series) {
-        // for this test dataset, every series has the same number of items
-        return this.itemCount; 
-    }
-
-    @Override
-    public Number getX(int series, int item) {
-        return getXValue(series, item);
-    }
-
-    @Override
-    public double getXValue(int series, int item) {
-        return series * this.itemCount + item;
-    }
-
-    @Override
-    public Number getY(int series, int item) {
-        return getYValue(series, item);
-    }
-
-    @Override
-    public double getYValue(int series, int item) {
-        return 2 * getXValue(series, item);
-    }
-
-    @Override
-    public int getSeriesCount() {
-        return this.seriesCount;
-    }
-
-    @Override
-    public Comparable getSeriesKey(int series) {
-        return series;
-    }
-
-    @Override
-    public int indexOf(Comparable seriesKey) {
-        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
-    }
-
-    @Override
-    public void addChangeListener(DatasetChangeListener listener) {
-        throw new UnsupportedOperationException("Not supported yet."); 
-    }
-
-    @Override
-    public void removeChangeListener(DatasetChangeListener listener) {
-        throw new UnsupportedOperationException("Not supported yet."); 
-    }
-
-    
-    @Override
-    public DatasetGroup getGroup() {
-        return this.group;
-    }
-
-    @Override
-    public void setGroup(DatasetGroup group) {
-        this.group = group;
-    }
-    
-}
