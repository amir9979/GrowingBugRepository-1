diff --git a/src/test/java/com/github/davidmoten/rtree/RTreeTest.java b/src/test/java/com/github/davidmoten/rtree/RTreeTest.java
index 3ae5b99..ca17c06 100644
--- a/src/test/java/com/github/davidmoten/rtree/RTreeTest.java
+++ b/src/test/java/com/github/davidmoten/rtree/RTreeTest.java
@@ -833,52 +833,6 @@ public class RTreeTest {
             System.out.println(tree.asString());
         }
     }
-    
-    @Test
-    public void testSearchWithCircleFindsCentreOnly() {
-        RTree<Integer, Point> tree = RTree.<Integer, Point> create().add(1, point(1, 1))
-                .add(2, point(2, 2)).add(3, point(3, 3));
-        List<Entry<Integer, Point>> list = tree.search(Geometries.circle(2, 2, 1)).toList().toBlocking().single();
-        assertEquals(1, list.size());
-        assertEquals(2, (int) list.get(0).value());
-    }
-    
-    @Test
-    public void testSearchWithCircleFindsAll() {
-        RTree<Integer, Point> tree = RTree.<Integer, Point> create().add(1, point(1, 1))
-                .add(2, point(2, 2)).add(3, point(3, 3));
-        List<Entry<Integer, Point>> list = tree.search(Geometries.circle(2, 2, 1.5)).toList().toBlocking().single();
-        assertEquals(3, list.size());
-    }
-    
-    @Test
-    public void testSearchWithLineFindsAll() {
-        RTree<Integer, Point> tree = RTree.<Integer, Point> create().add(1, point(1, 1))
-                .add(2, point(2, 2)).add(3, point(3, 3));
-        List<Entry<Integer, Point>> list = tree.search(Geometries.line(0, 0, 4, 4)).toList()
-                .toBlocking().single();
-        assertEquals(3, list.size());
-    }
-    
-    @Test
-    public void testSearchWithLineFindsOne() {
-        RTree<Integer, Point> tree = RTree.<Integer, Point> create().add(1, point(1, 1))
-                .add(2, point(2, 2)).add(3, point(3, 3));
-        List<Entry<Integer, Point>> list = tree.search(Geometries.line(1.5, 1.5, 2.5, 2.5)).toList()
-                .toBlocking().single();
-        assertEquals(1, list.size());
-        assertEquals(2, (int) list.get(0).value());
-    }
-    
-    @Test
-    public void testSearchWithLineFindsNone() {
-        RTree<Integer, Point> tree = RTree.<Integer, Point> create().add(1, point(1, 1))
-                .add(2, point(2, 2)).add(3, point(3, 3));
-        List<Entry<Integer, Point>> list = tree.search(Geometries.line(1.5, 1.5, 2.6, 2.5)).toList()
-                .toBlocking().single();
-        System.out.println(list);
-        assertEquals(0, list.size());
-    }
 
     private static Func2<Point, Circle, Double> distanceCircleToPoint = new Func2<Point, Circle, Double>() {
         @Override
diff --git a/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java b/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java
index 56bb7b1..2943848 100644
--- a/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java
+++ b/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java
@@ -181,14 +181,4 @@ public final class LineTest {
         assertEquals(0, a.distance(r), PRECISION);
     }
 
-    @Test
-    public void testLineDoesNotIntersectsPoint() {
-        assertFalse(Geometries.line(1.5, 1.5, 2.6, 2.5).intersects(new Point(2, 2)));
-    }
-
-    @Test
-    public void testLineDoesIntersectPoint() {
-        assertTrue(Geometries.line(1.5, 1.5, 2.5, 2.5).intersects(new Point(2, 2)));
-    }
-
 }
