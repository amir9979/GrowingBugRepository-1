diff --git a/src/main/java/com/zaxxer/sparsebits/SparseBitSet.java b/src/main/java/com/zaxxer/sparsebits/SparseBitSet.java
index 4efbc90..f68b320 100644
--- a/src/main/java/com/zaxxer/sparsebits/SparseBitSet.java
+++ b/src/main/java/com/zaxxer/sparsebits/SparseBitSet.java
@@ -1059,34 +1059,38 @@ public class SparseBitSet implements Cloneable, Serializable
         if (w1 > aSize)
             return i;
         w1 = Math.min(w1, aSize);
-        int w4 = i % LENGTH4;
+        final int w4 = i % LENGTH4;
 
         long word;
         long[][] a2;
         long[] a3;
 
+        final int f3 = w3;
+        final int f2 = w2;
+        final int f1 = w1;
+
         for (; w1 >= 0; --w1)
         {
             if ((a2 = bits[w1]) == null)
-                return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + w4;
+                return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + (f1 == w1 ? w4 : LENGTH4 - 1);
             for (; w2 >= 0; --w2)
             {
                 if ((a3 = a2[w2]) == null)
-                    return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + w4;
+                    return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + (f2 == w2 ? w4 : LENGTH4 - 1);
                 for (; w3 >= 0; --w3)
                 {
                     if ((word = a3[w3]) == 0)
-                        return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + w4;
+                        return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + (f3 == w3 ? w4 : LENGTH4 - 1);
                     for (int bitIdx = w4; bitIdx >= 0; --bitIdx)
                     {
                         if ((word & (1L << bitIdx)) == 0)
                             return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + bitIdx;
                     }
-                    w4 = LENGTH4_SIZE;
                 }
                 w3 = LENGTH3_SIZE;
             }
             w2 = LENGTH2_SIZE;
+            w3 = LENGTH3 - 1;
         }
         return -1;
     }
@@ -1135,31 +1139,29 @@ public class SparseBitSet implements Cloneable, Serializable
             w3 = w & MASK3;
             w4 = i % LENGTH4;
         }
+        boolean initialWord = true;
         long word;
         long[][] a2;
         long[] a3;
-        for (; w1 >= 0; --w1)
+        for (; w1 >= 0; --w1, initialWord = false)
         {
             if ((a2 = bits[w1]) != null)
-                for (; w2 >= 0; --w2)
+                for (; w2 >= 0; --w2, initialWord = false)
                 {
                     if ((a3 = a2[w2]) != null)
-                        for (; w3 >= 0; --w3)
+                        for (; w3 >= 0; --w3, initialWord = false)
                         {
                             if ((word = a3[w3]) != 0)
-                                for (int bitIdx = w4; bitIdx >= 0; --bitIdx)
+                                for (int bitIdx = (initialWord ? w4 : LENGTH4 - 1); bitIdx >= 0; --bitIdx)
                                 {
                                     if ((word & (1L << bitIdx)) != 0)
                                         return (((w1 << SHIFT1) + (w2 << SHIFT2) + w3) << SHIFT3) + bitIdx;
                                 }
-                            w4 = LENGTH4_SIZE;
                         }
                     w3 = LENGTH3_SIZE;
-                    w4 = LENGTH4_SIZE;
                 }
             w2 = LENGTH2_SIZE;
             w3 = LENGTH3_SIZE;
-            w4 = LENGTH4_SIZE;
         }
         return -1;
     }
