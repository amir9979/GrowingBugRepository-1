diff --git a/src/test/java/net/openhft/chronicle/network/UberHandlerTest.java b/src/test/java/net/openhft/chronicle/network/UberHandlerTest.java
index 910e22e1a2..0d04dacc58 100644
--- a/src/test/java/net/openhft/chronicle/network/UberHandlerTest.java
+++ b/src/test/java/net/openhft/chronicle/network/UberHandlerTest.java
@@ -10,7 +10,6 @@ import net.openhft.chronicle.network.cluster.AbstractSubHandler;
 import net.openhft.chronicle.network.cluster.Cluster;
 import net.openhft.chronicle.network.cluster.HostDetails;
 import net.openhft.chronicle.network.cluster.VanillaClusteredNetworkContext;
-import net.openhft.chronicle.network.cluster.handlers.UberHandler;
 import net.openhft.chronicle.network.connection.CoreFields;
 import net.openhft.chronicle.network.connection.VanillaWireOutPublisher;
 import net.openhft.chronicle.threads.Pauser;
@@ -32,7 +31,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Function;
 import java.util.stream.IntStream;
 
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 public class UberHandlerTest extends NetworkTestCommon {
@@ -90,12 +88,6 @@ public class UberHandlerTest extends NetworkTestCommon {
         }
     }
 
-    @Test(expected = IllegalArgumentException.class)
-    public void constructorWillThrowIfLocalAndRemoteIdentifiersAreTheSame() {
-        Wire wire = new BinaryWire(Bytes.allocateElasticOnHeap());
-        UberHandler.uberHandler(123, 123, WireType.BINARY).writeMarshallable(wire);
-    }
-
     private void stopAndWaitTillAllHandlersEnd() throws TimeoutException {
         running.set(false);
         TimingPauser pauser = Pauser.balanced();
@@ -110,35 +102,6 @@ public class UberHandlerTest extends NetworkTestCommon {
         return countersPerCid.size() == NUM_HANDLERS && countersPerCid.values().stream().allMatch(val -> val > 0);
     }
 
-    @Test
-    public void testHandlerWillCloseWhenHostIdsAreWrong() throws IOException {
-        expectException("Received a handler for host ID: 98, my host ID is: 1 this is probably a configuration error");
-        expectException("Closed");
-        expectException("SubHandler HeartbeatHandler");
-
-        TCPRegistry.createServerSocketChannelFor("initiator", "acceptor");
-        HostDetails initiatorHost = new HostDetails().hostId(99).connectUri("initiator");
-        HostDetails acceptorHost = new HostDetails().hostId(1).connectUri("acceptor");
-        HostDetails acceptorHostWithInvalidId = new HostDetails().hostId(98).connectUri("acceptor");
-
-        try (MyClusterContext acceptorCtx = clusterContext(acceptorHost, initiatorHost);
-             MyClusterContext initiatorCtx = clusterContext(initiatorHost, acceptorHostWithInvalidId)) {
-
-            acceptorCtx.cluster().start(acceptorHost.hostId());
-            initiatorCtx.cluster().start(initiatorHost.hostId());
-
-            AtomicBoolean establishedConnection = new AtomicBoolean(false);
-            initiatorCtx.connectionManager(acceptorHostWithInvalidId.hostId()).addListener((nc, isConnected) -> {
-                if (isConnected) {
-                    establishedConnection.set(true);
-                }
-            });
-            Jvm.pause(2000);
-            assertFalse(establishedConnection.get());
-            assertTrue(exceptions.keySet().stream().anyMatch(k -> k.throwable != null && k.throwable.getMessage().contains("Received a handler for host ID: 98, my host ID is: 1 this is probably a configuration error")));
-        }
-    }
-
     private void sendPingPong(WireOut wireOut, int cid) {
         wireOut.writeEventName(CoreFields.csp).text("pingpong")
                 .writeEventName(CoreFields.cid).int64(cid)
diff --git a/src/test/java/net/openhft/chronicle/network/cluster/handlers/HeartbeatHandlerTest.java b/src/test/java/net/openhft/chronicle/network/cluster/handlers/HeartbeatHandlerTest.java
deleted file mode 100644
index fa8c8a6274..0000000000
--- a/src/test/java/net/openhft/chronicle/network/cluster/handlers/HeartbeatHandlerTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package net.openhft.chronicle.network.cluster.handlers;
-
-import net.openhft.chronicle.bytes.Bytes;
-import net.openhft.chronicle.wire.BinaryWire;
-import net.openhft.chronicle.wire.Wire;
-import org.junit.Test;
-
-public class HeartbeatHandlerTest {
-
-    public static final long CID = 1234L;
-    public static final int VALID_HEARTBEAT_TIMEOUT_MS = 1000;
-    public static final int VALID_HEARTBEAT_INTERVAL_MS = 500;
-    public static final int TOO_SMALL_HEARTBEAT_TIMEOUT_MS = 999;
-    public static final int TOO_SMALL_HEARTBEAT_INTERVAL_MS = 499;
-
-    @Test(expected = IllegalArgumentException.class)
-    public void tooSmallHeartbeatIntervalMsThrowsIllegalArgumentException() {
-        HeartbeatHandler.heartbeatHandler(VALID_HEARTBEAT_TIMEOUT_MS, TOO_SMALL_HEARTBEAT_INTERVAL_MS, CID);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void tooSmallHeartbeatIntervalMsThrowsIllegalArgumentExceptionConstructor() {
-        createByDeserialization(VALID_HEARTBEAT_TIMEOUT_MS, TOO_SMALL_HEARTBEAT_INTERVAL_MS);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void tooSmallHeartbeatTimeoutMsThrowsIllegalArgumentException() {
-        HeartbeatHandler.heartbeatHandler(TOO_SMALL_HEARTBEAT_TIMEOUT_MS, VALID_HEARTBEAT_INTERVAL_MS, CID);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void tooSmallHeartbeatTimeoutMsThrowsIllegalArgumentExceptionConstructor() {
-        createByDeserialization(TOO_SMALL_HEARTBEAT_TIMEOUT_MS, VALID_HEARTBEAT_INTERVAL_MS);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void intervalEqualToTimeoutThrowsIllegalStateException() {
-        HeartbeatHandler.heartbeatHandler(VALID_HEARTBEAT_TIMEOUT_MS, VALID_HEARTBEAT_TIMEOUT_MS, CID);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void intervalEqualToTimeoutThrowsIllegalStateExceptionConstructor() {
-        createByDeserialization(VALID_HEARTBEAT_TIMEOUT_MS, VALID_HEARTBEAT_TIMEOUT_MS);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void intervalGreaterThanTimeoutThrowsIllegalStateException() {
-        HeartbeatHandler.heartbeatHandler(VALID_HEARTBEAT_TIMEOUT_MS, VALID_HEARTBEAT_TIMEOUT_MS + 100, CID);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void intervalGreaterThanTimeoutThrowsIllegalStateExceptionConstructor() {
-        createByDeserialization(VALID_HEARTBEAT_TIMEOUT_MS, VALID_HEARTBEAT_TIMEOUT_MS + 100);
-    }
-
-    private void createByDeserialization(long heartbeatTimeoutMs, long heartbeatIntervalMs) {
-        Wire wire = new BinaryWire(Bytes.elasticByteBuffer());
-        wire.write("heartbeatTimeoutMs").int64(heartbeatTimeoutMs);
-        wire.write("heartbeatIntervalMs").int64(heartbeatIntervalMs);
-        new HeartbeatHandler<>(wire);
-    }
-}
\ No newline at end of file
